// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaLinkedStorage.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaMemoryStorage.h"
                 void REcmaLinkedStorage::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RLinkedStorage*) 0)));
        protoCreated = true;
    }

    
        // primary base class RMemoryStorage:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RMemoryStorage*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RMemoryStorage
        REcmaHelper::registerFunction(&engine, proto, getRMemoryStorage, "getRMemoryStorage");
        
        // conversion for base class RStorage
        REcmaHelper::registerFunction(&engine, proto, getRStorage, "getRStorage");
        
        // conversion for base class RRequireHeap
        REcmaHelper::registerFunction(&engine, proto, getRRequireHeap, "getRRequireHeap");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllObjects, "queryAllObjects");
            
            REcmaHelper::registerFunction(&engine, proto, querySelectedLayers, "querySelectedLayers");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllVisibleEntities, "queryAllVisibleEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllEntities, "queryAllEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllUcs, "queryAllUcs");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllLayers, "queryAllLayers");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllLayerStates, "queryAllLayerStates");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllBlocks, "queryAllBlocks");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllLayoutBlocks, "queryAllLayoutBlocks");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllLayouts, "queryAllLayouts");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllViews, "queryAllViews");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllLinetypes, "queryAllLinetypes");
            
            REcmaHelper::registerFunction(&engine, proto, queryInfiniteEntities, "queryInfiniteEntities");
            
            REcmaHelper::registerFunction(&engine, proto, querySelectedEntities, "querySelectedEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayerEntities, "queryLayerEntities");
            
            REcmaHelper::registerFunction(&engine, proto, hasBlockEntities, "hasBlockEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryBlockEntities, "queryBlockEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayerBlockEntities, "queryLayerBlockEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryChildEntities, "queryChildEntities");
            
            REcmaHelper::registerFunction(&engine, proto, hasChildEntities, "hasChildEntities");
            
            REcmaHelper::registerFunction(&engine, proto, queryBlockReferences, "queryBlockReferences");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllBlockReferences, "queryAllBlockReferences");
            
            REcmaHelper::registerFunction(&engine, proto, queryAllViewports, "queryAllViewports");
            
            REcmaHelper::registerFunction(&engine, proto, queryDocumentVariablesDirect, "queryDocumentVariablesDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryDocumentVariables, "queryDocumentVariables");
            
            REcmaHelper::registerFunction(&engine, proto, queryObjectDirect, "queryObjectDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryObject, "queryObject");
            
            REcmaHelper::registerFunction(&engine, proto, queryObjectByHandle, "queryObjectByHandle");
            
            REcmaHelper::registerFunction(&engine, proto, queryEntityDirect, "queryEntityDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryEntity, "queryEntity");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayerDirect, "queryLayerDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayer, "queryLayer");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayerStateDirect, "queryLayerStateDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayerState, "queryLayerState");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayoutDirect, "queryLayoutDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryLayout, "queryLayout");
            
            REcmaHelper::registerFunction(&engine, proto, queryBlockDirect, "queryBlockDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryBlock, "queryBlock");
            
            REcmaHelper::registerFunction(&engine, proto, queryView, "queryView");
            
            REcmaHelper::registerFunction(&engine, proto, queryUcsDirect, "queryUcsDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryUcs, "queryUcs");
            
            REcmaHelper::registerFunction(&engine, proto, queryLinetypeDirect, "queryLinetypeDirect");
            
            REcmaHelper::registerFunction(&engine, proto, queryLinetype, "queryLinetype");
            
            REcmaHelper::registerFunction(&engine, proto, getLayerName, "getLayerName");
            
            REcmaHelper::registerFunction(&engine, proto, getLayerNames, "getLayerNames");
            
            REcmaHelper::registerFunction(&engine, proto, getLayerId, "getLayerId");
            
            REcmaHelper::registerFunction(&engine, proto, getLayoutName, "getLayoutName");
            
            REcmaHelper::registerFunction(&engine, proto, getLayoutNames, "getLayoutNames");
            
            REcmaHelper::registerFunction(&engine, proto, getLayoutId, "getLayoutId");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockName, "getBlockName");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockNameFromLayout, "getBlockNameFromLayout");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockNames, "getBlockNames");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockId, "getBlockId");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockIdAuto, "getBlockIdAuto");
            
            REcmaHelper::registerFunction(&engine, proto, getViewName, "getViewName");
            
            REcmaHelper::registerFunction(&engine, proto, getViewNames, "getViewNames");
            
            REcmaHelper::registerFunction(&engine, proto, getViewId, "getViewId");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypeName, "getLinetypeName");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypeDescription, "getLinetypeDescription");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypeLabel, "getLinetypeLabel");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypeNames, "getLinetypeNames");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypePatterns, "getLinetypePatterns");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypeId, "getLinetypeId");
            
            REcmaHelper::registerFunction(&engine, proto, getNewObjectId, "getNewObjectId");
            
            REcmaHelper::registerFunction(&engine, proto, getNewObjectHandle, "getNewObjectHandle");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentLayerId, "getCurrentLayerId");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentBlockId, "getCurrentBlockId");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentViewId, "getCurrentViewId");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentColor, "getCurrentColor");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentLineweight, "getCurrentLineweight");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentLinetypeId, "getCurrentLinetypeId");
            
            REcmaHelper::registerFunction(&engine, proto, deleteObject, "deleteObject");
            
            REcmaHelper::registerFunction(&engine, proto, setUndoStatus, "setUndoStatus");
            
            REcmaHelper::registerFunction(&engine, proto, getDimensionFont, "getDimensionFont");
            
            REcmaHelper::registerFunction(&engine, proto, getKnownVariable, "getKnownVariable");
            
            REcmaHelper::registerFunction(&engine, proto, isInBackStorage, "isInBackStorage");
            
            REcmaHelper::registerFunction(&engine, proto, getBackStorage, "getBackStorage");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RLinkedStorage*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RLinkedStorage",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaLinkedStorage::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RLinkedStorage(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RStorage */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RStorage*
                    ap0 =
                    qscriptvalue_cast<
                    RStorage*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RLinkedStorage: Argument 0 is not of type RStorage*.",
                               context);                    
                    }
                    RStorage& a0 = *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RLinkedStorage
                    * cppResult =
                    new
                    RLinkedStorage
                    (
                    a0
                    );
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RLinkedStorage(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaLinkedStorage::getRMemoryStorage(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RMemoryStorage* cppResult =
                    qscriptvalue_cast<RLinkedStorage*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaLinkedStorage::getRStorage(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RStorage* cppResult =
                    qscriptvalue_cast<RLinkedStorage*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaLinkedStorage::getRRequireHeap(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RRequireHeap* cppResult =
                    qscriptvalue_cast<RLinkedStorage*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaLinkedStorage::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RLinkedStorage"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaLinkedStorage::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RMemoryStorage");
    
        list.append("RStorage");
    
        list.append("RRequireHeap");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaLinkedStorage::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllObjects
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllObjects", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllObjects";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllObjects", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RObject::Id >'
    QSet < RObject::Id > cppResult =
        
               self->queryAllObjects();
        // return type: QSet < RObject::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllObjects().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllObjects", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::querySelectedLayers
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::querySelectedLayers", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::querySelectedLayers";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("querySelectedLayers", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RObject::Id >'
    QSet < RObject::Id > cppResult =
        
               self->querySelectedLayers();
        // return type: QSet < RObject::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.querySelectedLayers().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::querySelectedLayers", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllVisibleEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllVisibleEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllVisibleEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllVisibleEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllVisibleEntities();
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllVisibleEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllVisibleEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllEntities();
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllEntities(a0);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllEntities(a0
        ,
    a1);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllEntities(a0
        ,
    a1
        ,
    a2);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isArray()
        ) /* type: QList < RS::EntityType > */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isArray
                    QList < RS::EntityType >
                    a2;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(2),
                        a2
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllEntities(a0
        ,
    a1
        ,
    a2);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllUcs
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllUcs", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllUcs";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllUcs", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RUcs::Id >'
    QSet < RUcs::Id > cppResult =
        
               self->queryAllUcs();
        // return type: QSet < RUcs::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllUcs().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllUcs", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllLayers
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllLayers", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllLayers";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllLayers", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLayer::Id >'
    QSet < RLayer::Id > cppResult =
        
               self->queryAllLayers();
        // return type: QSet < RLayer::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLayer::Id >'
    QSet < RLayer::Id > cppResult =
        
               self->queryAllLayers(a0);
        // return type: QSet < RLayer::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllLayers().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllLayers", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllLayerStates
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllLayerStates", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllLayerStates";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllLayerStates", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLayerState::Id >'
    QSet < RLayerState::Id > cppResult =
        
               self->queryAllLayerStates();
        // return type: QSet < RLayerState::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLayerState::Id >'
    QSet < RLayerState::Id > cppResult =
        
               self->queryAllLayerStates(a0);
        // return type: QSet < RLayerState::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllLayerStates().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllLayerStates", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllBlocks
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllBlocks", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllBlocks";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllBlocks", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RBlock::Id >'
    QSet < RBlock::Id > cppResult =
        
               self->queryAllBlocks();
        // return type: QSet < RBlock::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RBlock::Id >'
    QSet < RBlock::Id > cppResult =
        
               self->queryAllBlocks(a0);
        // return type: QSet < RBlock::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllBlocks().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllBlocks", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllLayoutBlocks
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllLayoutBlocks", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllLayoutBlocks";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllLayoutBlocks", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RBlock::Id >'
    QSet < RBlock::Id > cppResult =
        
               self->queryAllLayoutBlocks();
        // return type: QSet < RBlock::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RBlock::Id >'
    QSet < RBlock::Id > cppResult =
        
               self->queryAllLayoutBlocks(a0);
        // return type: QSet < RBlock::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RBlock::Id >'
    QSet < RBlock::Id > cppResult =
        
               self->queryAllLayoutBlocks(a0
        ,
    a1);
        // return type: QSet < RBlock::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllLayoutBlocks().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllLayoutBlocks", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllLayouts
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllLayouts", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllLayouts";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllLayouts", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLayout::Id >'
    QSet < RLayout::Id > cppResult =
        
               self->queryAllLayouts();
        // return type: QSet < RLayout::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLayout::Id >'
    QSet < RLayout::Id > cppResult =
        
               self->queryAllLayouts(a0);
        // return type: QSet < RLayout::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllLayouts().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllLayouts", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllViews
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllViews", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllViews";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllViews", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RView::Id >'
    QSet < RView::Id > cppResult =
        
               self->queryAllViews();
        // return type: QSet < RView::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < RView::Id >'
    QSet < RView::Id > cppResult =
        
               self->queryAllViews(a0);
        // return type: QSet < RView::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllViews().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllViews", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllLinetypes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllLinetypes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllLinetypes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllLinetypes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RLinetype::Id >'
    QSet < RLinetype::Id > cppResult =
        
               self->queryAllLinetypes();
        // return type: QSet < RLinetype::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllLinetypes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllLinetypes", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryInfiniteEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryInfiniteEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryInfiniteEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryInfiniteEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryInfiniteEntities();
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryInfiniteEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryInfiniteEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::querySelectedEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::querySelectedEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::querySelectedEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("querySelectedEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->querySelectedEntities();
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.querySelectedEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::querySelectedEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayerEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayerEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayerEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayerEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryLayerEntities(a0);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryLayerEntities(a0
        ,
    a1);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayerEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayerEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::hasBlockEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::hasBlockEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::hasBlockEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("hasBlockEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasBlockEntities(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.hasBlockEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::hasBlockEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryBlockEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryBlockEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryBlockEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryBlockEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryBlockEntities(a0);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryBlockEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryBlockEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayerBlockEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayerBlockEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayerBlockEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayerBlockEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
     && (
            context->argument(1).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    RBlock::Id
                    a1 =
                    (RBlock::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryLayerBlockEntities(a0
        ,
    a1);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayerBlockEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayerBlockEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryChildEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryChildEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryChildEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryChildEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryChildEntities(a0);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(1).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    RS::EntityType
                    a1 =
                    (RS::EntityType)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryChildEntities(a0
        ,
    a1);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryChildEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryChildEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::hasChildEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::hasChildEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::hasChildEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("hasChildEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasChildEntities(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.hasChildEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::hasChildEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryBlockReferences
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryBlockReferences", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryBlockReferences";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryBlockReferences", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryBlockReferences(a0);
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryBlockReferences().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryBlockReferences", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllBlockReferences
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllBlockReferences", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllBlockReferences";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllBlockReferences", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllBlockReferences();
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllBlockReferences().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllBlockReferences", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryAllViewports
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryAllViewports", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryAllViewports";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryAllViewports", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < REntity::Id >'
    QSet < REntity::Id > cppResult =
        
               self->queryAllViewports();
        // return type: QSet < REntity::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryAllViewports().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryAllViewports", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryDocumentVariablesDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryDocumentVariablesDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryDocumentVariablesDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryDocumentVariablesDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RDocumentVariables >'
    QSharedPointer < RDocumentVariables > cppResult =
        
               self->queryDocumentVariablesDirect();
        // return type: QSharedPointer < RDocumentVariables >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryDocumentVariablesDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryDocumentVariablesDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryDocumentVariables
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryDocumentVariables", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryDocumentVariables";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryDocumentVariables", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RDocumentVariables >'
    QSharedPointer < RDocumentVariables > cppResult =
        
               self->queryDocumentVariables();
        // return type: QSharedPointer < RDocumentVariables >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryDocumentVariables().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryDocumentVariables", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryObjectDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryObjectDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryObjectDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryObjectDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RObject >'
    QSharedPointer < RObject > cppResult =
        
               self->queryObjectDirect(a0);
        // return type: QSharedPointer < RObject >
                // Shared pointer to object, cast to best match:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryObjectDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryObjectDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryObject
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryObject", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryObject";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryObject", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RObject >'
    QSharedPointer < RObject > cppResult =
        
               self->queryObject(a0);
        // return type: QSharedPointer < RObject >
                // Shared pointer to object, cast to best match:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryObject().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryObject", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryObjectByHandle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryObjectByHandle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryObjectByHandle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryObjectByHandle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Handle */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Handle
                    a0 =
                    (RObject::Handle)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RObject >'
    QSharedPointer < RObject > cppResult =
        
               self->queryObjectByHandle(a0);
        // return type: QSharedPointer < RObject >
                // Shared pointer to object, cast to best match:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryObjectByHandle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryObjectByHandle", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryEntityDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryEntityDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryEntityDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryEntityDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < REntity >'
    QSharedPointer < REntity > cppResult =
        
               self->queryEntityDirect(a0);
        // return type: QSharedPointer < REntity >
                // Shared pointer to entity, cast to best match:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryEntityDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryEntityDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < REntity >'
    QSharedPointer < REntity > cppResult =
        
               self->queryEntity(a0);
        // return type: QSharedPointer < REntity >
                // Shared pointer to entity, cast to best match:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayerDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayerDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayerDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayerDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayer >'
    QSharedPointer < RLayer > cppResult =
        
               self->queryLayerDirect(a0);
        // return type: QSharedPointer < RLayer >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayerDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayerDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayer >'
    QSharedPointer < RLayer > cppResult =
        
               self->queryLayer(a0);
        // return type: QSharedPointer < RLayer >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayer >'
    QSharedPointer < RLayer > cppResult =
        
               self->queryLayer(a0);
        // return type: QSharedPointer < RLayer >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayerStateDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayerStateDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayerStateDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayerStateDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayerState::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayerState::Id
                    a0 =
                    (RLayerState::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayerState >'
    QSharedPointer < RLayerState > cppResult =
        
               self->queryLayerStateDirect(a0);
        // return type: QSharedPointer < RLayerState >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayerStateDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayerStateDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayerState
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayerState", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayerState";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayerState", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayerState::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayerState::Id
                    a0 =
                    (RLayerState::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayerState >'
    QSharedPointer < RLayerState > cppResult =
        
               self->queryLayerState(a0);
        // return type: QSharedPointer < RLayerState >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayerState >'
    QSharedPointer < RLayerState > cppResult =
        
               self->queryLayerState(a0);
        // return type: QSharedPointer < RLayerState >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayerState().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayerState", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayoutDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayoutDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayoutDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayoutDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayout::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayout::Id
                    a0 =
                    (RLayout::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayout >'
    QSharedPointer < RLayout > cppResult =
        
               self->queryLayoutDirect(a0);
        // return type: QSharedPointer < RLayout >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayoutDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayoutDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLayout
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLayout", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLayout";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLayout", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayout::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayout::Id
                    a0 =
                    (RLayout::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayout >'
    QSharedPointer < RLayout > cppResult =
        
               self->queryLayout(a0);
        // return type: QSharedPointer < RLayout >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayout >'
    QSharedPointer < RLayout > cppResult =
        
               self->queryLayout(a0);
        // return type: QSharedPointer < RLayout >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLayout().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLayout", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryBlockDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryBlockDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryBlockDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryBlockDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RBlock >'
    QSharedPointer < RBlock > cppResult =
        
               self->queryBlockDirect(a0);
        // return type: QSharedPointer < RBlock >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryBlockDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryBlockDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryBlock
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryBlock", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryBlock";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryBlock", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RBlock >'
    QSharedPointer < RBlock > cppResult =
        
               self->queryBlock(a0);
        // return type: QSharedPointer < RBlock >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RBlock >'
    QSharedPointer < RBlock > cppResult =
        
               self->queryBlock(a0);
        // return type: QSharedPointer < RBlock >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryBlock().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryBlock", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RView::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RView::Id
                    a0 =
                    (RView::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RView >'
    QSharedPointer < RView > cppResult =
        
               self->queryView(a0);
        // return type: QSharedPointer < RView >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RView >'
    QSharedPointer < RView > cppResult =
        
               self->queryView(a0);
        // return type: QSharedPointer < RView >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryView", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryUcsDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryUcsDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryUcsDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryUcsDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RUcs::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RUcs::Id
                    a0 =
                    (RUcs::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RUcs >'
    QSharedPointer < RUcs > cppResult =
        
               self->queryUcsDirect(a0);
        // return type: QSharedPointer < RUcs >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryUcsDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryUcsDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryUcs
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryUcs", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryUcs";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryUcs", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RUcs::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RUcs::Id
                    a0 =
                    (RUcs::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RUcs >'
    QSharedPointer < RUcs > cppResult =
        
               self->queryUcs(a0);
        // return type: QSharedPointer < RUcs >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RUcs >'
    QSharedPointer < RUcs > cppResult =
        
               self->queryUcs(a0);
        // return type: QSharedPointer < RUcs >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryUcs().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryUcs", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLinetypeDirect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLinetypeDirect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLinetypeDirect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLinetypeDirect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLinetype::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLinetype::Id
                    a0 =
                    (RLinetype::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLinetype >'
    QSharedPointer < RLinetype > cppResult =
        
               self->queryLinetypeDirect(a0);
        // return type: QSharedPointer < RLinetype >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLinetypeDirect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLinetypeDirect", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::queryLinetype
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::queryLinetype", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::queryLinetype";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("queryLinetype", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLinetype::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLinetype::Id
                    a0 =
                    (RLinetype::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLinetype >'
    QSharedPointer < RLinetype > cppResult =
        
               self->queryLinetype(a0);
        // return type: QSharedPointer < RLinetype >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLinetype >'
    QSharedPointer < RLinetype > cppResult =
        
               self->queryLinetype(a0);
        // return type: QSharedPointer < RLinetype >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.queryLinetype().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::queryLinetype", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLayerName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLayerName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLayerName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLayerName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLayerName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLayerName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLayerName", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLayerNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLayerNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLayerNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLayerNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getLayerNames();
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getLayerNames(a0);
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLayerNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLayerNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLayerId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLayerId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLayerId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLayerId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RLayer::Id'
    RLayer::Id cppResult =
        
               self->getLayerId(a0);
        // return type: RLayer::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLayerId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLayerId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLayoutName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLayoutName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLayoutName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLayoutName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayout::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayout::Id
                    a0 =
                    (RLayout::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLayoutName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLayoutName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLayoutName", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLayoutNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLayoutNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLayoutNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLayoutNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getLayoutNames();
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getLayoutNames(a0);
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLayoutNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLayoutNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLayoutId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLayoutId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLayoutId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLayoutId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RLayout::Id'
    RLayout::Id cppResult =
        
               self->getLayoutId(a0);
        // return type: RLayout::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLayoutId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLayoutId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getBlockName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getBlockName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getBlockName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getBlockName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getBlockName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getBlockName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getBlockName", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getBlockNameFromLayout
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getBlockNameFromLayout", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getBlockNameFromLayout";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getBlockNameFromLayout", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getBlockNameFromLayout(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayout::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayout::Id
                    a0 =
                    (RLayout::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getBlockNameFromLayout(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getBlockNameFromLayout().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getBlockNameFromLayout", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getBlockNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getBlockNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getBlockNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getBlockNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getBlockNames();
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getBlockNames(a0);
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getBlockNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getBlockNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getBlockId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getBlockId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getBlockId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getBlockId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RBlock::Id'
    RBlock::Id cppResult =
        
               self->getBlockId(a0);
        // return type: RBlock::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getBlockId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getBlockId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getBlockIdAuto
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getBlockIdAuto", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getBlockIdAuto";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getBlockIdAuto", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RBlock::Id'
    RBlock::Id cppResult =
        
               self->getBlockIdAuto(a0);
        // return type: RBlock::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getBlockIdAuto().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getBlockIdAuto", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getViewName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getViewName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getViewName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getViewName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RView::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RView::Id
                    a0 =
                    (RView::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getViewName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getViewName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getViewName", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getViewNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getViewNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getViewNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getViewNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getViewNames();
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getViewNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getViewNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getViewId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getViewId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getViewId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getViewId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RView::Id'
    RView::Id cppResult =
        
               self->getViewId(a0);
        // return type: RView::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getViewId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getViewId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLinetypeName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLinetypeName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLinetypeName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLinetypeName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLinetype::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLinetype::Id
                    a0 =
                    (RLinetype::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLinetypeName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLinetypeName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLinetypeName", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLinetypeDescription
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLinetypeDescription", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLinetypeDescription";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLinetypeDescription", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLinetype::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLinetype::Id
                    a0 =
                    (RLinetype::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLinetypeDescription(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLinetypeDescription().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLinetypeDescription", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLinetypeLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLinetypeLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLinetypeLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLinetypeLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLinetype::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLinetype::Id
                    a0 =
                    (RLinetype::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLinetypeLabel(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLinetypeLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLinetypeLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLinetypeNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLinetypeNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLinetypeNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLinetypeNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getLinetypeNames();
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLinetypeNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLinetypeNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLinetypePatterns
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLinetypePatterns", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLinetypePatterns";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLinetypePatterns", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RLinetypePattern >'
    QList < RLinetypePattern > cppResult =
        
               self->getLinetypePatterns();
        // return type: QList < RLinetypePattern >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLinetypePatterns().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLinetypePatterns", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getLinetypeId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getLinetypeId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getLinetypeId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getLinetypeId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RLinetype::Id'
    RLinetype::Id cppResult =
        
               self->getLinetypeId(a0);
        // return type: RLinetype::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getLinetypeId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getLinetypeId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getNewObjectId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getNewObjectId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getNewObjectId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getNewObjectId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RObject::Id'
    RObject::Id cppResult =
        
               self->getNewObjectId();
        // return type: RObject::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getNewObjectId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getNewObjectId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getNewObjectHandle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getNewObjectHandle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getNewObjectHandle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getNewObjectHandle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RObject::Handle'
    RObject::Handle cppResult =
        
               self->getNewObjectHandle();
        // return type: RObject::Handle
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getNewObjectHandle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getNewObjectHandle", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getCurrentLayerId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getCurrentLayerId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getCurrentLayerId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getCurrentLayerId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RLayer::Id'
    RLayer::Id cppResult =
        
               self->getCurrentLayerId();
        // return type: RLayer::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getCurrentLayerId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getCurrentLayerId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getCurrentBlockId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getCurrentBlockId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getCurrentBlockId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getCurrentBlockId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RBlock::Id'
    RBlock::Id cppResult =
        
               self->getCurrentBlockId();
        // return type: RBlock::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getCurrentBlockId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getCurrentBlockId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getCurrentViewId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getCurrentViewId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getCurrentViewId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getCurrentViewId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RView::Id'
    RView::Id cppResult =
        
               self->getCurrentViewId();
        // return type: RView::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getCurrentViewId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getCurrentViewId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getCurrentColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getCurrentColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getCurrentColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getCurrentColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        
               self->getCurrentColor();
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getCurrentColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getCurrentColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getCurrentLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getCurrentLineweight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getCurrentLineweight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getCurrentLineweight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RLineweight::Lineweight'
    RLineweight::Lineweight cppResult =
        
               self->getCurrentLineweight();
        // return type: RLineweight::Lineweight
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getCurrentLineweight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getCurrentLineweight", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getCurrentLinetypeId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getCurrentLinetypeId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getCurrentLinetypeId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getCurrentLinetypeId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RLinetype::Id'
    RLinetype::Id cppResult =
        
               self->getCurrentLinetypeId();
        // return type: RLinetype::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getCurrentLinetypeId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getCurrentLinetypeId", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::deleteObject
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::deleteObject", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::deleteObject";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("deleteObject", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->deleteObject(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.deleteObject().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::deleteObject", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::setUndoStatus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::setUndoStatus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::setUndoStatus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("setUndoStatus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setUndoStatus(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.setUndoStatus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::setUndoStatus", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getDimensionFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getDimensionFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getDimensionFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getDimensionFont", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getDimensionFont();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getDimensionFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getDimensionFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getKnownVariable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getKnownVariable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getKnownVariable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getKnownVariable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        
               self->getKnownVariable(a0);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getKnownVariable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getKnownVariable", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::isInBackStorage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::isInBackStorage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::isInBackStorage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("isInBackStorage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isInBackStorage(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.isInBackStorage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::isInBackStorage", context, engine);
            return result;
        }
         QScriptValue
        REcmaLinkedStorage::getBackStorage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaLinkedStorage::getBackStorage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaLinkedStorage::getBackStorage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLinkedStorage* self = 
                        getSelf("getBackStorage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RStorage *'
    RStorage * cppResult =
        
               self->getBackStorage();
        // return type: RStorage *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLinkedStorage.getBackStorage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaLinkedStorage::getBackStorage", context, engine);
            return result;
        }
         QScriptValue REcmaLinkedStorage::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RLinkedStorage* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RLinkedStorage(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaLinkedStorage::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RLinkedStorage* self = getSelf("RLinkedStorage", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RLinkedStorage* REcmaLinkedStorage::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RLinkedStorage* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RLinkedStorage >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RLinkedStorage.%1(): "
                        "This object is not a RLinkedStorage").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RLinkedStorage* REcmaLinkedStorage::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RLinkedStorage* selfBase = getSelf(fName, context);
                RLinkedStorage* self = dynamic_cast<RLinkedStorage*>(selfBase);
                //return REcmaHelper::scriptValueTo<RLinkedStorage >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RLinkedStorage.%1(): "
                    "This object is not a RLinkedStorage").arg(fName),
                    context);
            }

            return self;
            


        }
        